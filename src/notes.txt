// React component creation approach
	There are four ways to creatinf Components	
		1. createClass
		2. ES class 
		3. Function
		4. Arrow Function

// Container vs Presentational Components

// Functional component benefits
	Easier to understand
	avoiding to use clases eleminates the need to use bindings
	avoid 'this' keyword
	less transpiled code
	high signal to noise ratio(single lines) - amiting return and comas
		Example: import React from "react";
							const UserClass = ({message}) => <div>(message</div>;
							export default UserClass;
	Enhanced code completion/ intellisense
	Easy to test
	inprove performance
	clases may be removed in the future
	
	// When to use Class component vs Function Components
		After 16.8 ...function components can do everything but,
									a. componentDidError
									b. getSnapshotBeforeUpdate
		*Prefer function components	

	// Container vs Presentation Components
			1. Container Components
					- little to no markup ( the backend for the front end - smart)
					- Pass data and actions down
					- Knows about Redux
					- Often stateful
			2. Presentation Components
					- Nearly all markup ( frontend & dum)
					- Receive data and actions via props
					- Doesn't know about Redux
					- Often no state

	// Creating the app foundation
		- Creating first pages
		- Creating Layout
		- Configuring routing
		- Seting up navigation

